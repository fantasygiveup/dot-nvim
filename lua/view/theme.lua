local M = {}

M.config = function()
  require("catppuccin").setup({
    background = { -- :h background
      light = "latte",
      dark = "mocha",
    },
    no_underline = true,
    custom_highlights = function(colors)
      return {
        Folded = { bg = colors.base },
        -- Override render_markdown.
        RenderMarkdownH1Bg = { bg = colors.base },
        RenderMarkdownH2Bg = { bg = colors.base },
        RenderMarkdownH3Bg = { bg = colors.base },
        RenderMarkdownH4Bg = { bg = colors.base },
        RenderMarkdownH5Bg = { bg = colors.base },
        RenderMarkdownH6Bg = { bg = colors.base },
        -- Override nvim-notify.
        NotifyINFOTitle = { fg = colors.green },
        NotifyINFOIcon = { fg = colors.green },
        NotifyINFOBorder = { fg = colors.green },
        ["@markup.link"] = { fg = colors.surface2 },
        ["@markup.link.url"] = { fg = colors.surface2 },
        ["@conceal"] = { fg = colors.surface2 },
        ["@markup.raw"] = { fg = colors.sapphire },
      }
    end,
  })
end

M.listen_to_system_theme_change = function()
  local fwatch = require("fwatch")
  local vars = require("vars")
  local dir = vim.fn.stdpath("config") .. vars.path_sep .. "lua" .. vars.path_sep .. "color"
  local file = dir .. vars.path_sep .. "color.lua"

  local fd = io.open(file)
  if not fd then
    return
  end
  fd.close()

  fwatch.watch(dir, {
    on_event = function()
      require("utils.async").timer(function()
        dofile(file)
        require("status_line").config() -- redraw status_line entirely
      end)
    end,
  })
end

M.init = function()
  -- NOTE: "color.lua" with a "background" option is generated by an external tool.
  local ok = pcall(require, "color/color")
  if not ok then
    vim.o.background = "light" -- fallback to the light variant.
  end

  vim.cmd.colorscheme("catppuccin")

  require("status_line").config()

  M.listen_to_system_theme_change()
end

return M
